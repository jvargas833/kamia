#!KAMAILIO
#
# sample config file for dispatcher module
# - load balancing of VoIP calls with round robin
# - no TPC listening
# - don't dispatch REGISTER and presence requests
#
# Kamailio (OpenSER) SIP Server v3.2
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: sr-users@lists.sip-router.org
#
# Refer to the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php
# for an explanation of possible statements, functions and parameters.
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode:
#     - define WITH_DEBUG
#
#!define FLT_ACC 1

####### Global Parameters #########

#!ifdef WITH_DEBUG
debug=0
log_stderror=yes
#!else
debug=0
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=30

/* comment the next line to enable TCP */
disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on revers DNS on IPs (default on) */
auto_aliases=no
server_header="Server: SmartTELCO PROXY"
/* add local domain aliases */
# alias="mysipserver.com"
listen = udp:172.20.170.91:5060
listen = udp:127.0.0.1:5060

sip_warning=no

####### Modules Section ########

#set module path
#mpath="/usr/local/lib/kamailio/modules_k/:/usr/local/lib/kamailio/modules/"
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"


#loadmodule "db_mysql.so"
#loadmodule "mi_fifo.so"
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "usrloc.so"
loadmodule "http_client.so"
#loadmodule "mi_rpc.so"
loadmodule "acc.so"
loadmodule "dispatcher.so"
loadmodule "dialog.so"
loadmodule "json.so"
loadmodule "jansson.so"
#loadmodule "db_sqlite.so"
#loadmodule "sqlops.so"
loadmodule "htable.so"
loadmodule "exec.so"
#loadmodule "cfgutils.so"

modparam("htable", "htable", "a=>size=8;")



# ----------------- setting module-specific parameters ---------------


# ----- mi_fifo params -----
#modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")
#modparam("jsonrpcs", "fifo_name", "/tmp/kamailio_rpc.fifo")
#TODO:verificar json en prod

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)


# ----- acc params -----
modparam("acc", "log_flag", 1)
modparam("acc", "failed_transaction_flag", 3)
modparam("acc", "log_extra",
  "src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd;src_ip=$si")

# ----- tm params -----
modparam("tm", "fr_timer", 5000)
modparam("tm", "fr_inv_timer", 33000)
#modparam("tm", "fr_timer", 10000)
#modparam("tm", "fr_inv_timer", 120000)

# ----- dispatcher params -----

#modparam("db_text", "db_mode", 0)
modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher.list")
modparam("dispatcher", "flags", 2)
#modparam("dispatcher", "dst_avp", "$avp(dsdst)")
modparam("dispatcher", "xavp_dst", "AVP_DST")
#modparam("dispatcher", "grp_avp", "$avp(dsgrp)")
modparam("dispatcher", "xavp_dst_mode", 0)
#modparam("dispatcher", "cnt_avp", "$avp(dscnt)")
modparam("dispatcher", "xavp_ctx", "AVP_CTX")
#modparam("dispatcher", "sock_avp", "$avp(dssocket)")
modparam("dispatcher", "force_dst", 1)
#modparam("dispatcher", "db_url", "text:///etc/kamailio/dbtext")
#modparam("dispatcher", "hash_pvar", "hash the $fU@$ci")
#modparam("sqlops","sqlcon","ca=>sqlite:///dev/shm/pnnsqlite3")
modparam("dialog", "enable_stats", 0)
modparam("dialog", "dlg_flag", 4)
modparam("dialog", "default_timeout",1800)
modparam("dialog", "rr_param", "xyz")
modparam("dialog", "dlg_match_mode", 0)
modparam("dialog", "db_mode", 0)
modparam("dialog", "send_bye", 1)
#habilitando ping en dialogos
#modparam("dialog", "ka_timer", 3)
#modparam("dialog", "ka_interval", 30)
#modparam("dialog", "ka_failed_limit", 1)
modparam("http_client", "httpcon", "smart_api=>http://api.smartvoice.tech")
modparam("exec", "setvars", 1)

####### Routing Logic ########


# main request routing logic

route {

	#force_send_socket(10.169.7.6:5060);
        if (is_present_hf("Allow-Events")){
                xlog("L_DBG", "Removiendo Allow-Events \n");
		remove_hf("Allow-Events");
        }
	# per request initial checks
	route(REQINIT);

	# handle requests within SIP dialogs
	route(WITHINDLG);


        if (is_method("OPTIONS")) {
        xlog("L_INFO", "Recibido un mensaje OPTIONS de $si:$sp\n");

        # Responder con un 200 OK
        sl_send_reply("200", "OK");
        exit;
    }
	### only initial requests (no To tag)

	# CANCEL processing
	if (is_method("CANCEL"))
	{

		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE"))


	{
	  setflag(FLT_ACC); # do accounting
                dlg_manage();
                dlg_set_property("ka-src");
                dlg_set_property("ka-dst");
        
        #	setflag(1); # do accounting
	}

	# handle presence related requests
	route(PRESENCE);

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null)
	{
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	if ($si =~"^127.0\.0\.(1)$")|$si =~"^10.169\.7\.(6)$"{
                        xlog("L_INFO","----------------- Llamada saliente desde CallAgent: Enrutando a ruta 10 desde ruta 2 ---------------\n");
                        route(EGRESS);

        }else{

	# dispatch destinations
	route(INGRESS);
	}
	route(RELAY);
}


route[RELAY] {
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(1); # do accounting ...
				setflag(3); # ... even if the transaction fails
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK;
					# must be ACK after a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard.
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Handle SIP registrations
route[REGISTRAR] {
	if(!is_method("REGISTER"))
		return;
	sl_send_reply("404", "No registrar");
	exit;
}

# Presence server route
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;

	sl_send_reply("404", "Not here");
	exit;
}

# Dispatch requests
route[EGRESS]{

	xlog("L_INFO","----------------- INGRESANDO A RUTA OUTSBC ---------------\n");
	if (is_present_hf("P-PLAN-NIR")){
        remove_hf("P-PLAN-POBLACION");
        remove_hf("P-PLAN-ESTADO");
        remove_hf("P-PLAN-MUNICIPIO");
        remove_hf("P-PLAN-NIR");
        remove_hf("P-PLAN-SERIE");
        remove_hf("P-PLAN-MODALIDAD");
        remove_hf("P-PLAN-OPERATOR");


	}
	$avp(s:P-Core-SBC)=$(hdr(P-Core-SBC));
	$avp(s:P-Core-RCV-PORT)=$(hdr(P-Core-RCV-PORT));
	remove_hf("Allow-Events");
	remove_hf("P-Core-SBC");
	remove_hf("P-Core-RCV-PORT");
        remove_hf("Allow");
        $avp(s:Allow) = "INVITE, ACK, BYE, CANCEL, OPTIONS, INFO, UPDATE, REFER, NOTIFY";
        append_hf("Allow: $avp(s:Allow)\r\n");

        #remove_hf("Contact");
        #$avp(s:Contact) = "<sip:"+ $fU +"@172.19.9.20>";
        #append_hf("Contact: $avp(s:Contact)\r\n");

		if (uri=~"^sip:(.+)@"){
			$ru = "sip:" + $rU + "@" + $avp(s:P-Core-SBC) + ":" +  $avp(s:P-Core-RCV-PORT) + ";user=phone";
		}
	setflag(4);
	t_on_reply("2");
	return;

}
route[INGRESS] {

        xlog("L_INFO","----------------- INGRESANDO A RUTA INGRESS ---------------\n");
        append_hf("P-Core-SBC: 10.169.7.4\r\n");
        append_hf("P-Core-RCV-PORT: 5060\r\n");
        $avp(s:r_prefix)= $(rU{s.substr,0,4});
    	$avp(s:destination_number)= $(rU{s.substr,-10,0});

        if($DLG_count > $(sht(a=>max_calls){s.int})){

        $avp(s:cc) ="1000";
        }
        else
        {
	$avp(s:cc) ="1000";
	}

	if(!ds_select_dst("$avp(s:cc)", "4"))
	{
		send_reply("404", "No destination");
		exit;
	}
	xlog("L_DBG", "--- SCRIPT: going to <$ru> via <$du>\n");
	t_on_reply("1");
	t_on_failure("RTF_DISPATCH");
	return;

}

onreply_route[1] {

xlog("L_INFO", "---  Entrando a ruta relay 1 \n");
        if (is_present_hf("Allow-Events")){
                xlog("L_INFO", "Removiendo Allow-Events \n");
                remove_hf("Allow-Events");
		remove_hf("P-Core-RCV-PORT");
		remove_hf("P-Core-SBC");
        }

	if (is_present_hf("P-Core-SBC")){
                xlog("L_INFO", "P-CORE-SBC \n");
                remove_hf("P-Core-SBC");
		remove_hf("P-Core-RCV-PORT");
        }



}

onreply_route[2] {


xlog("L_INFO", "---  Entrando a ruta relay 2 \n");
        if (is_present_hf("Allow-Events")){
                xlog("L_INFO", "Removiendo Allow-Events \n");
                remove_hf("Allow-Events");
                remove_hf("P-Core-RCV-PORT");
                remove_hf("P-Core-SBC");
        }

        if (is_present_hf("P-Core-SBC")){
                xlog("L_INFO", "P-CORE-SBC \n");
                remove_hf("P-Core-SBC");
                remove_hf("P-Core-RCV-PORT");
        }



}
failure_route[RTF_DISPATCH] {
	xlog("L_INFO", "---  Entrando a ruta RTF_DISPATCH \n");

        if (t_is_canceled()) {

                exit;
        }


   if (t_check_status("503")|t_check_status("482")|t_check_status("500")) {

	xlog("L_INFO", "--- APLICANDO RETRY $T_reply_reason \n");
	$avp(s:reason) = $T_reply_reason;

	if($avp(s:reason)== "Maximum Calls In Progress"|$avp(s:reason)== "Request merged" |$avp(s:reason)== "Internal server Error"){

		ds_select_dst("1002", "4");
#		sleep("2");
		setflag(4);
		t_on_failure("SECOND_INSTANCE");
		route(RELAY);
	}
	else{
		send_reply("$T_reply_code", "$T_reply_reason");
	    }

	}
	else{

		send_reply("$T_reply_code", "$T_reply_reason");

	}

}

failure_route[SECOND_INSTANCE] {
        xlog("L_INFO", "---  Entrando a ruta RTF_DISPATCH \n");

        if (t_is_canceled()) {

                exit;
        }


   if (t_check_status("503")|t_check_status("482")|t_check_status("500")) {

        xlog("L_INFO", "--- APLICANDO RETRY $T_reply_reason \n");
        $avp(s:reason) = $T_reply_reason;

        if($avp(s:reason)== "Maximum Calls In Progress"|$avp(s:reason)== "Request merged"|$avp(s:reason)== "Internal server Error" ){

                ds_select_dst("1002", "4");
#               sleep("2");
                setflag(4);
                t_on_failure("RTF_SPILLOVER");
                route(RELAY);
        }
        else{
                send_reply("$T_reply_code", "$T_reply_reason");
            }

        }
        else{

                send_reply("$T_reply_code", "$T_reply_reason");

        }

}

failure_route[SECOND_INSTANCE_RT] {
        xlog("L_INFO", "---  Entrando a ruta RTF_DISPATCH \n");

        if (t_is_canceled()) {
                exit;
        }


   if (t_check_status("503")|t_check_status("482")|t_check_status("500")) {

        xlog("L_INFO", "--- APLICANDO RETRY $T_reply_reason \n");
        $avp(s:reason) = $T_reply_reason;

        if($avp(s:reason)== "Maximum Calls In Progress"|$avp(s:reason)== "Request merged" |$avp(s:reason)== "Internal server Error"){

                ds_select_dst("1002", "4");
#               sleep("2");
                setflag(4);
                t_on_failure("LAST");
                route(RELAY);
        }
        else{
                send_reply("$T_reply_code", "$T_reply_reason");
            }

        }
        else{

                send_reply("$T_reply_code", "$T_reply_reason");

        }

}

failure_route[LAST] {
        xlog("L_INFO", "---  Entrando a ruta RTF_DISPATCH \n");

        if (t_is_canceled()) {

                exit;
        }


   if (t_check_status("503")|t_check_status("482")|t_check_status("500")) {

        xlog("L_INFO", "--- APLICANDO RETRY $T_reply_reason \n");
        $avp(s:reason) = $T_reply_reason;

        if($avp(s:reason)== "Maximum Calls In Progress"|$avp(s:reason)== "Request merged" |$avp(s:reason)== "Internal server Error"){

                ds_select_dst("1002", "4");
#               sleep("2");
                setflag(4);
                t_on_failure("LAST_RT");
                route(RELAY);
        }
        else{
                send_reply("$T_reply_code", "$T_reply_reason");
            }

        }
        else{

                send_reply("$T_reply_code", "$T_reply_reason");

        }

}


failure_route[LAST_RT] {
        xlog("L_INFO", "---  Entrando a ruta RTF_DISPATCH \n");

        if (t_is_canceled()) {
                exit;
        }


   if (t_check_status("503")|t_check_status("482")|t_check_status("500")) {

        xlog("L_INFO", "--- APLICANDO RETRY $T_reply_reason \n");
        $avp(s:reason) = $T_reply_reason;

        if($avp(s:reason)== "Maximum Calls In Progress"|$avp(s:reason)== "Request merged" |$avp(s:reason)== "Internal server Error" ){

                ds_select_dst("1002", "4");
#               sleep("2");
                setflag(4);
                t_on_failure("RTF_SPILLOVER");
                route(RELAY);
        }
        else{
                send_reply("$T_reply_code", "$T_reply_reason");
            }

        }
        else{

                send_reply("$T_reply_code", "$T_reply_reason");

        }

}


failure_route[RTF_SPILLOVER] {

        xlog("L_INFO", "---  Entrando a ruta RTF_DISPATCH \n");

        if (t_is_canceled()) {


                exit;
        }


   if (t_check_status("503")|t_check_status("482")|t_check_status("500")) {

        xlog("L_INFO", "--- APLICANDO SPILLOVER $T_reply_reason \n");
        $avp(s:reason) = $T_reply_reason;

        if($avp(s:reason)== "Maximum Calls In Progress"|$avp(s:reason)== "Request merged"|$avp(s:reason)== "Internal server Error"){

		#sleep("1");

                ds_select_dst("1002", "4");
                setflag(4);
		t_on_failure("RTF_NORMAL");
                route(RELAY);
        }
        else{
                send_reply("$T_reply_code", "$T_reply_reason");
            }

        }
        else{

                send_reply("$T_reply_code", "$T_reply_reason");

        }


}
failure_route[RTF_NORMAL] {
        if (t_is_canceled()) {
                exit;
        }
	$avp(s:reason) = $T_reply_reason;

        if($avp(s:reason)== "Maximum Calls In Progress"){

			$avp(s:smartname)="smtvmd01";
                        $avp(s:cdr_case)=$(Tf{s.select,2, });
                        if ($avp(s:cdr_case)==""){
                               $avp(s:cdr_year)=$(Tf{s.select,5, });
                                $avp(s:cdr_full_time)=$(Tf{s.select,4, });
                                $avp(s:cdr_hour)= $(Tf{s.select,4, }{s.select,0,:});
                                $avp(s:cdr_day)="0"+$(Tf{s.select,3, });
                                $avp(s:cdr_month)=$(Tf{s.select,1, });
                                }
                        else{
                                $avp(s:cdr_year)=$(Tf{s.select,4, });
                                $avp(s:cdr_full_time)=$(Tf{s.select,3, });
                                $avp(s:cdr_hour)= $(Tf{s.select,3, }{s.select,0,:});
                                $avp(s:cdr_day)=$(Tf{s.select,2, });
                                $avp(s:cdr_month)=$(Tf{s.select,1, });
                        }
                        switch($avp(s:cdr_month)) { case "Jan": $avp(s:cdr_month)="01"; break; case "Feb": $avp(s:cdr_month)="02"; break; case "Mar": $avp(s:cdr_month)="03"; break; case "Apr": $avp(s:cdr_month)="04"; break; case "May": $avp(s:cdr_month)="05"; break; case "Jun": $avp(s:cdr_month)="06"; break; case "Jul": $avp(s:cdr_month)="07"; break; case "Aug": $avp(s:cdr_month)="08"; break; case "Sep": $avp(s:cdr_month)="09"; break; case "Oct": $avp(s:cdr_month)="10"; break; case "Nov": $avp(s:cdr_month)="11"; break; case "Dec": $avp(s:cdr_month)="12"; break;default: }
                        exec_msg("echo $si,$TS,0,0,$rU,0,0,503,CAP,0,100 >> /opt/cdr/kamailio/SMART_VOICE_KAMD_$avp(s:smartname)_$avp(s:cdr_year)$avp(s:cdr_month)$avp(s:cdr_day)_$avp(s:cdr_hour).cdr");

	send_reply("$T_reply_code", "SmartVOICE MAXCAP");

	}
	else{

	send_reply("$T_reply_code", "$T_reply_reason");
	}



}